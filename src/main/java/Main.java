public class Main {
    public static void main(String[] args) {
        int i = 1;                      // 1
        Object o = new Object();        // 2
        Integer ii = 2;                 // 3
        printAll(o, i, ii);             // 4
        System.out.println("finished"); // 7
    }

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                   // 5
        System.out.println(o.toString() + i + ii);  // 6
    }
}
//0 - При создании класса мэйна он попадает в метаспейс, а также системные классы попадают в эту область памяти. В момент обращения к методам, у нас образуется фрейм на стеке, в кот будет помещаться вся инфа о том, что у нас происходит в данном методе.
//1- Далее на этот фрейм main помещаются все примитивные переменные. Внутри этого метода к этим переменным можно обратиться в любой момент, вне этого метода к этим переменным обратиться не получиться, тк они не доступны из остальных частей кода (участков памяти).
//2- Далее происходит обращение к конструктору new Object(), те создание нового объекта класса Object(). В момент компиляции данного кода в куче образуется экземпляр класса обджект. Объект создался в куче, но на стеке ни чего не поменялось. На стеке появиться какое-то значение только в тот момент, когда объявим ссылку Object o, и укажем на что она должна ссылаться, т.е на новый созданный объект new Object(),

//3- в стеке во фрейме main появляется ссылка Integer ii на созданный объект куче класса Integer.
//4- Далее вызываем метод printAll. В момент вызова любого нового метода в сетке создается фрейм, кот пока что пустой. И в него передали ссылки o (для Object) и  ii (для Integer) на объекты Object, Integer. А примитивная переменная  int i скопировалась в новой фрейм метод printAll из фрейма main.
//в методе printAll, будет не та самая ссылка, кот мы используем в main, а создастся новая ссылка, кот будет доступна только в пределах метода printAll, но кот тоже указывает на тот же объекты Object, Integer, кот был связан с сылкой o (для Object) и  ii (для Integer).
//    Теперь в программе есть два объекта Object, Integer, и  по две ссылкина o (для Object) и  ii (для Integer) на каждый объект из разных фреймов.

//5- во фрейме метода printAll создается ссылка uselessVar на объект Integer, и присваивается этому объекту значение.

//6- Вызываем метод println. В стеке создастся новый фрейм, куда передадим ссылку ii для Integer и ссылку о для Object , а примитивная переменная  int i скопируется в новой фрейм метода println из фрейма printAll.
//     Далее мы обращаемся к объекту Object по ссылке «о» и вызываем у него метод toString. В момент вызова метода в сетке создается фрейм toString(), и передали в него новую ссылку на наш объект Object, кот будет доступна только в пределах метода toString, но кот тоже указывает на тот же объект Object.

//7- Для метода принтлн в стеке создастся новый фрейм, куда передадим текст "finished".

// в итоге в стеке создастся 5 фреймов:  1-main, 2-printAll, 3-println("finished"), 4-println(o.toString() + i + ii), 5-toString().
// в куче будет создано 3 объекта: 1-Object (с ссылкой o), 2-Integer (с ссылкой ii), 3-Integer (с ссылкой uselessVar)

